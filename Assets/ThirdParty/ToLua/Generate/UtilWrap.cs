//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Util), typeof(System.Object));
		L.RegFunction("New", _CreateUtil);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Http", get_Http, set_Http);
		L.RegVar("Socket", get_Socket, set_Socket);
		L.RegVar("Res", get_Res, set_Res);
		L.RegVar("Ref", get_Ref, set_Ref);
		L.RegVar("File", get_File, set_File);
		L.RegVar("Encrypt", get_Encrypt, set_Encrypt);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Util obj = new Util();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Util.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Http(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Util.Http);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Socket(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Util.Socket);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Res(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Util.Res);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Ref(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Util.Ref);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_File(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Util.File);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Encrypt(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, Util.Encrypt);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Http(IntPtr L)
	{
		try
		{
			HttpUtil arg0 = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 2);
			Util.Http = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Socket(IntPtr L)
	{
		try
		{
			SocketUtil arg0 = (SocketUtil)ToLua.CheckObject<SocketUtil>(L, 2);
			Util.Socket = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Res(IntPtr L)
	{
		try
		{
			ResUtil arg0 = (ResUtil)ToLua.CheckObject<ResUtil>(L, 2);
			Util.Res = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Ref(IntPtr L)
	{
		try
		{
			RefUtil arg0 = (RefUtil)ToLua.CheckObject<RefUtil>(L, 2);
			Util.Ref = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_File(IntPtr L)
	{
		try
		{
			FileUtil arg0 = (FileUtil)ToLua.CheckObject<FileUtil>(L, 2);
			Util.File = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Encrypt(IntPtr L)
	{
		try
		{
			EncryptUtil arg0 = (EncryptUtil)ToLua.CheckObject<EncryptUtil>(L, 2);
			Util.Encrypt = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

