local base = require("comp_base")
local Comp = class("card_own_item", base)

function Comp:onLoad()
    self.info = self.param.info
    self.tpl = tpl.template_card[self.info:get_tid()]

    self.holeCompMap = {}

    self.roleLayout = self.node:Find("mask"):Find("roleLayout")
    self.skillLinksLayout = self.node:Find("skillLinksLayout")
    self.skillHolesLayout = self.node:Find("skillHolesLayout")
    self.starsLayout = self.node:Find("starsLayout")
    self.energysLayout = self.node:Find("energysLayout")
    self.starCompMap = {}
    self.energyCompMap = {}
    for i = 1, 9 do
        local node = GameObject.Instantiate(self:load_gameObject("prefab1", "card_star_item")).transform
        node.parent = self.starsLayout
        node.localPosition = {x = 0, y = 0, z = 0}
        node.localScale = {x = 1.0, y = 1.0, z = 1.0}
        local c = comp:addComponent(node, "card_star_item", {state = 0})
        self.starCompMap[i] = c
    end
    for i = 1, 5 do
        local node = GameObject.Instantiate(self:load_gameObject("prefab1", "card_energy_item")).transform
        node.parent = self.energysLayout
        node.localPosition = {x = 0, y = 0, z = 0}
        node.localScale = {x = 1.0, y = 1.0, z = 1.0}
        local c = comp:addComponent(node, "card_energy_item", {state = 0})
        self.energyCompMap[i] = c
    end

    self:refresh()
end
function Comp:refresh()
    -- 背景
    self.uiComp.Image.bg0Image.sprite = self:load_sprite("p10", string.format("bg_%s0", self.tpl.pic_bg))
    self.uiComp.Image.bg1Image.sprite = self:load_sprite("p10", string.format("bg_%s1", self.tpl.pic_bg))
    -- 卡牌图
    for i = 0, self.roleLayout.childCount - 1 do
        GameObject.Destroy(self.roleLayout:GetChild(i).gameObject)
    end
    local node = GameObject.Instantiate(self:load_gameObject(self.tpl.pic_ab, self.info:get_tid())).transform
    node.parent = self.roleLayout
    node.localPosition = {x = 0, y = 0, z = 0}
    node.localScale = {x = 1.0, y = 1.0, z = 1.0}
    -- 框
    self.uiComp.Image.bgCard0Image.sprite = self:load_sprite("p10", string.format("bg_card_%s_0", self.tpl.rank))
    self.uiComp.Image.bgCard1Image.sprite = self:load_sprite("p10", string.format("bg_card_%s_1", self.tpl.rank))
    self.uiComp.Image.bgCard2Image.sprite = self:load_sprite("p10", string.format("bg_card_%s_2", self.tpl.rank))
    if (self.tpl.rank == 0) then
        self.uiComp.Image.bgCard3Image.gameObject:SetActive(false)
    else
        self.uiComp.Image.bgCard3Image.gameObject:SetActive(true)
        self.uiComp.Image.bgCard3Image.sprite = self:load_sprite("p10", string.format("bg_card_%s_3", self.tpl.rank))
    end
    -- 属性
    self.uiComp.Image.attributeIconImage.sprite =
        self:load_sprite("p10", string.format("icon_attribute%s", self.tpl.attribute))
    -- 强化等级
    for i, comp in pairs(self.starCompMap) do
        if (i <= self.info:getEnchLv()) then
            -- 满
            comp.state = 1
        else
            -- 空
            comp.state = 0
        end
        comp:refresh()
    end
    -- 进阶等级
    for i, comp in pairs(self.energyCompMap) do
        if (self.info:getAdvLv() >= i + 5) then
            -- 红
            comp.state = 2
        elseif (self.info:getAdvLv() >= i) then
            -- 蓝
            comp.state = 1
        else
            -- 空
            comp.state = 0
        end
        comp:refresh()
    end
    -- 技能孔
    self.holeCompMap = {}
    for i = 0, self.skillHolesLayout.childCount - 1 do
        GameObject.Destroy(self.skillHolesLayout:GetChild(i).gameObject)
    end
    for i, holeInfo in pairs(self.info:get_skillHoles()) do
        holeInfo.cid = self.info:get_cid()
        local node = GameObject.Instantiate(self:load_gameObject("prefab1", "skill_hole_item")).transform
        node.parent = self.skillHolesLayout
        node.localPosition = {x = 0, y = 0, z = 0}
        node.localScale = {x = 1.5, y = 1.5, z = 1.5}
        local c = comp:addComponent(node, "skill_hole_item", {info = holeInfo})
        self.holeCompMap[holeInfo.idx] = c
        -- 技能宝石
        local skillGemInfo = player:getCardSkillGem(holeInfo.cid, holeInfo.idx)
        c:refreshSkillGem(skillGemInfo)
    end
    utils.refreshLayout(self.skillHolesLayout, UE.RectTransform)

    -- 技能链接
    for i = 0, self.skillLinksLayout.childCount - 1 do
        GameObject.Destroy(self.skillLinksLayout:GetChild(i).gameObject)
    end
    for i, linkInfo in pairs(self.info:get_skillLinks()) do
        local node = GameObject.Instantiate(self:load_gameObject("prefab1", "skill_link_item")).transform
        node.parent = self.skillLinksLayout
        node.localPosition = {x = 0, y = 0, z = 0}
        node.localScale = {x = 1.0, y = 1.0, z = 1.0}

        local firstHoleComp = self.holeCompMap[linkInfo.holeIdxs[1]]
        local lastHoleComp = self.holeCompMap[linkInfo.holeIdxs[2]]
        comp:addComponent(node, "skill_link_item", {firstHoleComp = firstHoleComp, lastHoleComp = lastHoleComp})
    end
end
return Comp
