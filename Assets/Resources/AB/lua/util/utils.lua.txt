class = require("middle_class")
_G.csbytesToLuabytes = function(bytes)
    local data = ""
    for i = 0, bytes.Length - 1 do
        data = data .. string.char(bytes[i])
    end
    return data
end
_G.luaVector3ArrToCsVector3Arr = function(arr)
    local csArr = System.Array.CreateInstance(typeof(UnityEngine.Vector3), #arr)
    for index, luaPos in ipairs(arr) do
        local x = luaPos.x or 0
        local y = luaPos.y or 0
        local z = luaPos.z or 0
        csArr:SetValue(UE.Vector3.New(x, y, z), index - 1)
    end
    return csArr
end
_G.luaVector2ArrToCsVector2Arr = function(arr)
    local csArr = System.Array.CreateInstance(typeof(UnityEngine.Vector2), #arr)
    for index, luaPos in ipairs(arr) do
        local x = luaPos.x or 0
        local y = luaPos.y or 0
        csArr:SetValue(UE.Vector2.New(x, y), index - 1)
    end
    return csArr
end
_G.luaCSVector2ArrToCsVector3Arr = function(arr, z)
    z = z or 0
    local csArr = System.Array.CreateInstance(typeof(UnityEngine.Vector3), arr.Length)
    for i = 0, arr.Length - 1 do
        local pos = arr:GetValue(i)
        csArr:SetValue(UE.Vector3.New(pos.x, pos.y, z), i)
    end
    return csArr
end
_G.string.split = function(str, str1)
    local arr = {}
    string.gsub(
        str,
        "[^" .. str1 .. "]+",
        function(w)
            table.insert(arr, w)
        end
    )
    return arr
end

_G.table.copy = function(copyTable, table)
    if table == nil then
        table = {}
    end
    local copy = nil

    copy = function(copyTable, table)
        if type(copyTable) ~= "table" then
            table = copyTable
        else
            for k, v in pairs(copyTable) do
                if type(v) ~= "table" then
                    table[k] = v
                else
                    table[k] = {}
                    copy(v, table[k])
                end
            end
        end
    end

    copy(copyTable, table)
    return table
end
_G.table.exist = function(t, value)
    for k, v in pairs(t) do
        if v == value then
            return true
        end
    end
    return false
end
_G.table.del = function(t, value)
    for k, v in pairs(t) do
        if v == value then
            table.remove(t, k)
            --t[k] = nil
            return true
        end
    end
    return false
end
_G.table.len = function(t)
    local num = 0
    for key, value in pairs(t) do
        num = num + 1
    end
    return num
end

_G.utils = {}
utils.serialize = function(obj)
    local lua = ""
    if obj == nil then
        return "nil"
    end
    local t = type(obj)
    if t == "number" then
        lua = lua .. obj
    elseif t == "boolean" then
        lua = lua .. tostring(obj)
    elseif t == "string" then
        lua = lua .. string.format("%q", obj)
    elseif t == "table" then
        lua = lua .. "{ "
        for k, v in pairs(obj) do
            lua = lua .. "[" .. utils.serialize(k) .. "]=" .. utils.serialize(v) .. ", "
        end
        local metatable = getmetatable(obj)
        if metatable ~= nil and type(metatable.__index) == "table" then
            for k, v in pairs(metatable.__index) do
                lua = lua .. "[" .. utils.serialize(k) .. "]=" .. utils.serialize(v) .. ", "
            end
        end
        lua = lua .. "}"
        lua = string.gsub(lua, ", }", " }")
    elseif t == "function" then
        lua = lua .. "[function]"
    elseif t == "userdata" then
        lua = lua .. "[" .. tostring(t) .. "]"
    elseif t == "nil" then
        lua = lua .. "[nil]"
    else
        error("can not serialize a " .. t .. " type.")
    end
    return lua
end
utils.sizeFormat = function(byteSize)
    if byteSize > (1024 * 1024 * 1024) * 0.95 then
        return string.format("%0.2fGB", byteSize / (1024 * 1024 * 1024))
    elseif byteSize > (1024 * 1024) * 0.95 then
        return string.format("%0.2fMB", byteSize / (1024 * 1024))
    elseif byteSize > 1024 * 0.95 then
        return string.format("%0.2fKB", byteSize / 1024)
    end
    return string.format("%0.2fBytes", byteSize)
end
-- 立刻更新UGUI布局
utils.refreshLayout = function(node)
    local rectTransform = comp:getCSComponent(node, UE.RectTransform)
    if (rectTransform == nil) then
        return false
    end
    UEUI.LayoutRebuilder.ForceRebuildLayoutImmediate(rectTransform)
    return true
end
-- 计算2D向量夹角
utils.getVectorAngle = function(pos1, pos2)
    local cos =
        (pos1.x * pos2.x + pos1.y * pos2.y) /
        (math.sqrt(pos1.x * pos1.x + pos1.y * pos1.y) * math.sqrt(pos2.x * pos2.x + pos2.y * pos2.y))
    local angle = math.acos(cos) * 180 / math.pi
    return angle
end

-- -- 更新Node宽度适配
-- utils.refreshWidthNode = function(node)
--     local rectTransform = comp:getCSComponent(node, UE.RectTransform)
--     if (rectTransform ~= nil) then
--         local width = rectTransform.sizeDelta.x
--         local posX = nil
--         if (rectTransform.anchorMin.x == 0 and rectTransform.anchorMax.x == 0) then
--             posX = rectTransform.offsetMax.x - width / 2
--         -- print("需要调整左边间距>>>PosX：" , posX)
--         end
--         if (rectTransform.anchorMin.x == 1 and rectTransform.anchorMax.x == 1) then
--             posX = rectTransform.offsetMin.x + width / 2
--         -- print("需要调整右边间距>>>PosX：" , posX)
--         end
--         if (posX ~= nil) then
--             posX = posX * ui.SCREEN_SCALE
--             if (rectTransform.anchorMin.x == 0 and rectTransform.anchorMax.x == 0) then
--                 local minX = posX + width / 2 - width
--                 local maxX = minX + width
--                 rectTransform.offsetMin = {x = minX, y = rectTransform.offsetMin.y}
--                 rectTransform.offsetMax = {x = maxX, y = rectTransform.offsetMax.y}
--             -- print("需要调整左边间距>>>PosX：" , posX)
--             end
--             if (rectTransform.anchorMin.x == 1 and rectTransform.anchorMax.x == 1) then
--                 local maxX = posX - width / 2 + width
--                 local minX = maxX - width
--                 rectTransform.offsetMin = {x = minX, y = rectTransform.offsetMin.y}
--                 rectTransform.offsetMax = {x = maxX, y = rectTransform.offsetMax.y}
--             -- print("需要调整右边间距>>>PosX：" , posX)
--             end
--         end
--     end
-- end
-- -- 更新Nodes宽度适配
-- utils.refreshWidthNodes = function(node)
--     for i = 0, node.childCount - 1 do
--         utils.refreshWidthNode(node:GetChild(i))
--     end
-- end
_G.gameLogic = {}
-- 数据层面注销
local logout = function()
    network:disconn()
    if (_G.player ~= nil) then
        _G.player:close()
        _G.player = nil
    end
end
-- 重新登录
gameLogic.reelectUser = function()
    logout()
    network.token = ""
    ui:loadScene("Login")
end
-- 重选角色
gameLogic.reelectPlayer = function()
    logout()
    ui:loadScene("Login", {defaultUI = "ui_player_sel"})
end
