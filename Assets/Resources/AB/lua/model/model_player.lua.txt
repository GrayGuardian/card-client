local base = require("model_base")
local Model = class("player", base)

local PlayerCurrency = require("model_player_currency")
local Card = require("model_card")
local SkillGem = require("model_skillgem")
local TAB = {
    {name = "currency", cls = PlayerCurrency, isArray = false},
    {name = "card", cls = Card, isArray = true},
    {name = "skillGem", cls = SkillGem, isArray = true}
}

function Model:CLASS_NAME()
    return "Player"
end
function Model:onLoad()
    print("[Model] init>>>>", self:CLASS_NAME(), self.idx, self.baseInfo)

    for key, info in pairs(TAB) do
        if (info.isArray) then
            self[string.format("%sMap", info.name)] = {}
        end
    end
    self:broadcast_on(
        BROADCAST_CODE.SOCKET_EVENT("upModelData"),
        function(data)
            -- print("[Player]", "接收到ModelData>>>", data.clsName)
            local baseInfo = data[data.clsName]
            for key, info in pairs(TAB) do
                if data.clsName == info.cls.CLASS_NAME() then
                    if (info.isArray) then
                        if (self[string.format("%sMap", info.name)][data.idx] == nil) then
                            self[string.format("%sMap", info.name)][data.idx] = info.cls:new(data.idx, baseInfo)
                        end
                    else
                        if (self[info.name] == nil and data.idx == self.idx) then
                            self[info.name] = info.cls:new(self.idx, baseInfo)
                        end
                    end
                end
            end
        end,
        1
    )
end
function Model:onDestroy()
    for key, info in pairs(TAB) do
        if (info.isArray) then
            for idx, model in pairs(self[string.format("%sMap", info.name)]) do
                model:close()
            end
        else
            if (self[info.name] ~= nil) then
                self[info.name]:close()
            end
        end
    end
end

-- 获得下级所需经验
function Model:getNextLvExp(lv)
    lv = lv or self:get_lv()
    local exp = 30 * (Mathf.Pow(lv, 3) + lv * 5) - 80
    return exp
end
-- 获取卡牌上的镶嵌宝石
function Model:getCardSkillGem(cid, holeIdx)
    local cardInfo = self.cardMap[cid]
    if (cardInfo == nil) then
        return {}
    end
    for key, info in pairs(self.skillGemMap) do
        if (info:get_inlay() ~= nil and info:get_inlay().cid == cid and info:get_inlay().holeIdx == holeIdx) then
            return info
        end
    end
    return nil
end
-- 获取卡牌上的镶嵌宝石
function Model:getCardSkillGems(cid)
    local cardInfo = self.cardMap[cid]
    if (cardInfo == nil) then
        return {}
    end
    local infoMap = {}
    for key, info in pairs(self.skillGemMap) do
        if (info:get_inlay() ~= nil and info:get_inlay().cid == cid) then
            infoMap[info:get_skid()] = info
        end
    end
    return infoMap
end

return Model
