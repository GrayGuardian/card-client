local UI = class("UI")

function UI:init()
    broadcast:on(
        BROADCAST_CODE.SCENE_LOADED,
        function(info)
            self:sceneLoad(info)
        end
    )
    self.sceneParamMap = {}
    self.sceneOptsMap = {}
    self.sceneComp = nil

    self.uiCompMap = {}
    self.onlyUIMap = {}

    self.mainCamera = nil
    self.mapComp = nil

    self:createUIRoot()
end
-- 场景lua文件加载
function UI:sceneLoad(info)
    local param = table.copy(self.scaneParam)
    local opts = table.copy(self.sceneOpts)
    self.scaneParam = nil
    self.sceneOpts = nil
    print("跳转场景>>>>", "idx:", info.idx, "name:", info.name)
    if self.sceneComp ~= nil then
        print("卸载场景lua脚本>>" .. utils.serialize(self.sceneComp.info))
        self.sceneComp:_onDestroy()
    end
    luaName = string.lower("scene_" .. info.name)
    print("加载场景lua脚本>>" .. luaName)
    self.sceneComp = require(luaName):new(info, param, opts)
end
-- 切换场景
function UI:loadScene(name, param, opts)
    self.scaneParam = param
    self.sceneOpts = opts

    UE.SceneManagement.SceneManager.LoadSceneAsync(name)
end

-- 初始化UIRoot
function UI:createUIRoot()
    local prefab = resUtil:Load("Base", "UIRoot")
    local go = GameObject.Instantiate(prefab)
    GameObject.DontDestroyOnLoad(go)
    self.uiRoot = go.transform
    self.uiRoot.name = "UIRoot"
    self.uiCamera = self.uiRoot:Find("UICamera"):GetComponent("Camera")
    self.uiCanvas = self.uiRoot:Find("UICanvas")

    -- if GameConst.PRO_ENV == ENV_TYPE.MASTER then
    --     local canvasScaler = self.uiCanvas:GetComponent("CanvasScaler")
    --     canvasScaler.referenceResolution = {x = UE.Screen.width, y = UE.Screen.height}
    -- end
end
-- ShowUI
function UI:showUI(name, param, opts)
    local comp

    -- InitComp
    if require(name) == nil then
        return nil
    end
    comp = require(name):new(name, param, opts)
    self:addUI(comp)
    --加载AB依赖包
    resUtil:LoadAssetBundle(comp.ab)
    --加载界面
    comp.prefab = resUtil:Load(comp.ab, name)
    if comp.prefab == nil then
        return nil
    end
    local go = GameObject.Instantiate(comp.prefab)
    local node = go:GetComponent("RectTransform")
    comp:bind(node)

    return comp
end
function UI:closeUI(uiComp)
    uiComp:_onDestroy()
    GameObject.Destroy(uiComp.node.gameObject)
    self:delUI(uiComp)
    --卸载AB依赖包
    if self:getUIByType(uiComp.name) == nil then
        --不存在同类别的UI 则卸载
        resUtil:UnLoad(uiComp.prefab)
    end
end
function UI:closeAllUI()
    local tempMap = {}
    for key, uiComp in pairs(self.uiCompMap) do
        table.insert(tempMap, uiComp)
    end
    for key, uiComp in pairs(tempMap) do
        uiComp:close()
    end
end
function UI:getRelaOrder(order)
    local index = #self.uiCompMap
    for i, uiComp in ipairs(self.uiCompMap) do
        if uiComp.opts.order > order then
            index = i
            break
        end
    end
    return index
end
function UI:addUI(uiComp)
    table.insert(self.uiCompMap, uiComp)
end
function UI:delUI(uiComp)
    table.del(self.uiCompMap, uiComp)
end
function UI:getUIByType(t)
    for key, value in pairs(self.uiCompMap) do
        if value.name == t then
            return value
        end
    end
    return nil
end

--业务逻辑
function UI:showTip(param, opts)
    local comp = self:showUI("ui_tip", param, opts)
    if comp == nil then
        comp = self:showUI("ui_upres_tip", param, opts)
    end
    return comp
end

function UI:showOnlyUI(key, name, param, opts)
    if self.onlyUIMap[key] ~= nil and not self.onlyUIMap[key]:isClear() then
        return
    end
    self.onlyUIMap[key] = self:showUI(name, param, opts)
end

function UI:showOnlyTip(key, param, opts)
    if self.onlyUIMap[key] ~= nil and not self.onlyUIMap[key]:isClear() then
        return
    end
    self.onlyUIMap[key] = self:showTip(param, opts)
end

function UI:createPlayer(info)
    local node = pool:loadPoolObject("role")
    node.localScale = {x = 2.5, y = 2.5, z = 2.5}
    local comp = comp:addComponent(node, "player", info)
    return comp
end
function UI:createRole(info)
    local node = pool:loadPoolObject("role")
    node.localScale = {x = 2.5, y = 2.5, z = 2.5}
    local comp = comp:addComponent(node, "role", info)
    return comp
end

function UI:loadMap(mid)
    if self.mapComp ~= nil then
        print("关闭地图>>>", mid)
        self.mapComp.node.gameObject:Destroy()
    end
    print("加载地图>>>", mid)
    local node = GameObject("map" .. mid).transform
    node.localPosition = {x = 0, y = 0, z = 10}
    node.tag = "map"
    self.mapComp = comp:addComponent(node, "map" .. mid)
    return self.mapComp
end

return UI
