local UIBase = class("UIBase")

------------------- 继承重写 -------------------
--加载参数二次重写默认值
function UIBase:GET_DEFAULT_OPTS()
    return table.copy(UIBase.DEFAULT_OPTS)
end
--UI所在AB包 默认为UI名 可通过子类 base.static.ab = '' 进行重写
function UIBase:GET_AB()
    return ""
end
--通用AB依赖包 可通过子类 base.static.abs = {} 进行重写
-- function UIBase:GET_ABS()
--     return {}
-- end

-- Button点击事件 组件名首字母自动大写 o-组件实例 order-组件序号，可区分多个重名组件
-- function UITip:on[UIComp_Button_Name]Click(o,order)

-- end
function UIBase:onLoad()
end
function UIBase:onDestroy()
end
------------------- 继承重写 -------------------
-- 默认加载参数
-- order：渲染数值，越大越前
-- blockInput：是否阻挡下层Input消息
-- blackMask: 背景黑色遮罩透明度
UIBase.static.DEFAULT_OPTS = {order = 0, blockInput = true, blackMask = 30}

function UIBase:init(name, param, opts)
    self.name = name
    self.param = param or {}

    self.opts = self:GET_DEFAULT_OPTS()
    if opts ~= nil then
        for key, value in pairs(opts) do
            self.opts[key] = value
        end
    end
    for key, value in pairs(UIBase.DEFAULT_OPTS) do
        if self.opts[key] == nil then
            self.opts[key] = value
        end
    end

    self.ab = self:GET_AB() == "" and self.name or self:GET_AB()
    -- self.abs = self:GET_ABS()
    -- table.insert(self.abs, 1, self.ab)

    self.node = nil
    self.uiComp = {}
    self.timerMap = {}
    self.broadcastMap = {}
    self.abResMap = {}
end

--绑定物体
function UIBase:bind(node)
    self.node = node
    -- 更新位置
    self.node.name = self.name
    self.node.parent = ui.uiCanvas
    self.node:SetSiblingIndex(self:getRelaOrder())
    self.node.localScale = {x = 1, y = 1, z = 1}
    self.node.anchorMin = {x = 0, y = 0}
    self.node.anchorMax = {x = 1, y = 1}
    self.node.pivot = {x = 0.5, y = 0.5}
    self.node.anchoredPosition3D = {x = 0, y = 0, z = 0}
    self.node.offsetMax = {x = 0, y = 0}
    self.node.offsetMin = {x = 0, y = 0}

    -- 宽度适配
    -- for i = 0, self.node.childCount - 1 do
    --     local rectTransform = comp:getCSComponent(self.node:GetChild(i), UE.RectTransform)
    --     if (rectTransform ~= nil) then
    --         local width = rectTransform.sizeDelta.x
    --         local posX = nil
    --         if (rectTransform.anchorMin.x == 0 and rectTransform.anchorMax.x == 0) then
    --             posX = rectTransform.offsetMax.x - width / 2
    --         -- print("需要调整左边间距>>>PosX：" , posX)
    --         end
    --         if (rectTransform.anchorMin.x == 1 and rectTransform.anchorMax.x == 1) then
    --             posX = rectTransform.offsetMin.x + width / 2
    --         -- print("需要调整右边间距>>>PosX：" , posX)
    --         end
    --         if (posX ~= nil) then
    --             posX = posX * ui.SCREEN_SCALE
    --             if (rectTransform.anchorMin.x == 0 and rectTransform.anchorMax.x == 0) then
    --                 local minX = posX + width / 2 - width
    --                 local maxX = minX + width
    --                 rectTransform.offsetMin = {x = minX, y = rectTransform.offsetMin.y}
    --                 rectTransform.offsetMax = {x = maxX, y = rectTransform.offsetMax.y}
    --             -- print("需要调整左边间距>>>PosX：" , posX)
    --             end
    --             if (rectTransform.anchorMin.x == 1 and rectTransform.anchorMax.x == 1) then
    --                 local maxX = posX - width / 2 + width
    --                 local minX = maxX - width
    --                 rectTransform.offsetMin = {x = minX, y = rectTransform.offsetMin.y}
    --                 rectTransform.offsetMax = {x = maxX, y = rectTransform.offsetMax.y}
    --             -- print("需要调整右边间距>>>PosX：" , posX)
    --             end
    --         end
    --     end
    -- end
    --加载配置设置
    local maskImage = comp:addCSComponent(self.node, UEUI.Image)
    maskImage.raycastTarget = self.opts.blockInput
    maskImage.color = {r = 0, g = 0, b = 0, a = self.opts.blackMask / 100}

    self:uiCompInit()
    self:_onLoad()
end
-- ui组件初始化
function UIBase:uiCompInit()
    local types = {"Text", "Image", "Button", "InputField", "ScrollRect"}

    for index, t in ipairs(types) do
        self.uiComp[t] = {}
        local arr = comp:getCSComponentsInChildren(self.node, UEUI[t])
        for i = 0, arr.Length - 1 do
            local comp = arr:GetValue(i)
            local key = comp.name
            if type(self.uiComp[t][key]) == "table" then
                table.insert(self.uiComp[t][key], comp)
            else
                -- body
                if self.uiComp[t][key] == nil then
                    self.uiComp[t][key] = comp
                else
                    --print("ui已存在", #self.uiComp[t][key])
                    local tempComp = self.uiComp[t][key]
                    self.uiComp[t][key] = {}
                    table.insert(self.uiComp[t][key], tempComp)
                    table.insert(self.uiComp[t][key], comp)
                end
            end
            --print("加入CompUI>>", " type:", t, "  name:", key)
        end
    end

    -- 注册Button事件
    for key, comp in pairs(self.uiComp.Button) do
        local sum = 0
        local e = nil
        if type(comp) == "table" then
            e = "on" .. comp[1].name:gsub("^%l", string.upper) .. "Click"
        else
            e = "on" .. comp.name:gsub("^%l", string.upper) .. "Click"
        end
        -- print(self.name, " UI 注册Button事件>", e)
        if self[e] ~= nil then
            if type(comp) == "table" then
                sum = #comp
                for i, comp1 in pairs(comp) do
                    comp1.onClick:AddListener(
                        function()
                            self[e](self, comp1, i)
                        end
                    )
                end
            else
                sum = 1
                comp.onClick:AddListener(
                    function()
                        self[e](self, comp, 1)
                    end
                )
            end
        end

        --print("注册Button事件>", e, "  共计注册：", sum)
    end
end
function UIBase:_onLoad()
    print("加载UI-" .. self.name .. ">>>>>>>>>>>>>>>>>>>>>>>> onLoad")
    self:onLoad()
end
function UIBase:_onDestroy()
    print("卸载UI-" .. self.name .. " >>>>>>>>>>>>>>>>>>>>>>>> onDestroy")
    self:timer_clear()
    self:broadcast_clear()
    self:load_clear()
    self:onDestroy()
end
-- 卸载
function UIBase:close()
    ui:closeUI(self)
end
function UIBase:isClear()
    return not table.exist(ui.uiCompMap, self)
end
function UIBase:getRelaOrder()
    return ui:getRelaOrder(self.opts.order) - 1
end

function UIBase:timer_on(time, loopCount, onTrigger)
    local t = timer:on(time, loopCount, onTrigger)
    table.insert(self.timerMap, t)
    return t
end
function UIBase:timer_out(t)
    timer:out(t)
    table.del(self.timerMap, t)
end
function UIBase:timer_clear()
    local tempMap = {}
    for index, t in pairs(self.timerMap) do
        table.insert(tempMap, t)
    end
    for index, t in pairs(tempMap) do
        self:timer_out(t)
    end
    self.timerMap = {}
end
function UIBase:broadcast_on(key, callback, order, isOnce)
    local flag = broadcast:on(key, callback, order, isOnce)
    if flag then
        local info = {key = key, callback = callback}
        table.insert(self.broadcastMap, info)
    end
    return flag
end
function UIBase:broadcast_out(key, callback)
    local flag = broadcast:out(key, callback)
    if flag then
        table.del(self.broadcastMap, {key = key, callback = callback})
    end
    return flag
end
function UIBase:broadcast_clear()
    local tempMap = {}
    for index, info in pairs(self.broadcastMap) do
        table.insert(tempMap, info)
    end
    for index, info in pairs(tempMap) do
        self:broadcast_out(info.key, info.callback)
    end
    self.broadcastMap = {}
end
function UIBase:load_sprite(key, resName, loadIsClose)
    loadIsClose = loadIsClose or false
    local k = {key = key, resName = resName}
    local prefab = resUtil:LoadSprite(key, resName, loadIsClose)
    self.abResMap[k] = prefab
    return prefab
end
function UIBase:load_sprite_asyn(key, resName, cb, loadIsClose)
    loadIsClose = loadIsClose or false
    resUtil:LoadSpriteAsyn(
        key,
        resName,
        System.Action_UnityEngine_Sprite(
            function(prefab)
                local k = {key = key, resName = resName}
                self.abResMap[k] = prefab
                if cb ~= nil then
                    cb(prefab)
                end
            end
        ),
        loadIsClose
    )
end
function UIBase:load_gameObject(key, resName, loadIsClose)
    loadIsClose = loadIsClose or false
    local k = {key = key, resName = resName}
    local prefab = resUtil:LoadGameObject(key, resName, loadIsClose)
    self.abResMap[k] = prefab
    return prefab
end
function UIBase:load_gameObject_asyn(key, resName, cb, loadIsClose)
    loadIsClose = loadIsClose or false
    resUtil:LoadGameObjectAsyn(
        key,
        resName,
        System.Action_UnityEngine_GameObject(
            function(prefab)
                local k = {key = key, resName = resName}
                self.abResMap[k] = prefab
                if cb ~= nil then
                    cb(prefab)
                end
            end
        ),
        loadIsClose
    )
end
function UIBase:load_animator(key, resName, loadIsClose)
    loadIsClose = loadIsClose or false
    local k = {key = key, resName = resName}
    local prefab = resUtil:LoadAnimator(key, resName, loadIsClose)
    self.abResMap[k] = prefab
    return prefab
end
function UIBase:load_animator_asyn(key, resName, cb, loadIsClose)
    loadIsClose = loadIsClose or false
    resUtil:LoadAnimatorAsyn(
        key,
        resName,
        System.Action_UnityEngine_RuntimeAnimatorController(
            function(prefab)
                local k = {key = key, resName = resName}
                self.abResMap[k] = prefab
                if cb ~= nil then
                    cb(prefab)
                end
            end
        ),
        loadIsClose
    )
end
function UIBase:unload(res)
    for k, prefab in pairs(self.abResMap) do
        if (prefab == res) then
            resUtil:UnLoad(res)
            -- print('清理AB包资源>>', utils.serialize(k))
            self.abResMap[k] = nil
        end
    end
end
function UIBase:load_clear()
    for key, prefab in pairs(self.abResMap) do
        --print("清理AB包资源>>", utils.serialize(key))
        resUtil:UnLoad(prefab)
    end
    self.abResMap = {}
end
return UIBase
