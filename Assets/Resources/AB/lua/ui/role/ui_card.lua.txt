local base = require("ui_base")
local UI = class("card", base)

----------------UI配置------------------
function UI:GET_AB()
    return "ui"
end
function UI:GET_DEFAULT_OPTS()
    return {order = -10, blockInput = false, blackMask = 0}
end
----------------UI配置------------------

function UI:awake()
    self.cardAvatarCompMap = {}
    self.cardAvatarItemLayout = self.uiComp.ScrollRect.cardAvatarsScrollView.transform:Find("Viewport"):Find("Content")
    self.cardLayout = self.node:Find("cardLayout")

    self.equipsRightLayout = self.node:Find("equipsRightLayout")
    self.equipsLeftLayout = self.node:Find("equipsLeftLayout")

    self.bagLayout = self.node:Find("bagLayout")
    self.bagItemsLayout = self.uiComp.ScrollRect.bagContentScrollView.transform:Find("Viewport"):Find("Content")
    self.bagItemsGroup = comp:getCSComponent(self.bagItemsLayout, UEUI.GridLayoutGroup)

    self.bagItemCompMap = {}
end
-- 视图重适应
function UI:refreshLayout()
    local width
    local node
    local rectTransform
    local group
    -- 装备栏适配
    width = (1080 * GAME_CONFIG.SCREEN_SCALE - 720 * 0.85) / 2
    rectTransform = comp:getCSComponent(self.equipsRightLayout, UE.RectTransform)
    rectTransform.sizeDelta = {
        x = width,
        y = rectTransform.sizeDelta.y
    }
    rectTransform = comp:getCSComponent(self.equipsLeftLayout, UE.RectTransform)
    rectTransform.sizeDelta = {
        x = width,
        y = rectTransform.sizeDelta.y
    }
    -- 按钮适配
    node = self.node:Find("cardBtnLayout")
    rectTransform = comp:getCSComponent(node, UE.RectTransform)

    group = self.uiComp.GridLayoutGroup.cardBtnLayout
    rectTransform.sizeDelta = {
        x = rectTransform.sizeDelta.x * GAME_CONFIG.SCREEN_SCALE,
        y = rectTransform.sizeDelta.y
    }
    group.cellSize = {x = group.cellSize.x * GAME_CONFIG.SCREEN_SCALE, y = group.cellSize.y}

    -- 背包适配
    node = self.bagItemsLayout
    rectTransform = comp:getCSComponent(node, UE.RectTransform)
    group = self.bagItemsGroup

    local def_item_width = group.cellSize.x
    local def_group_spacing = group.spacing.x
    local def_group_column = group.constraintCount

    width = def_item_width * def_group_column + def_group_spacing * (def_group_column - 1)
    width = width * GAME_CONFIG.SCREEN_SCALE

    local column = math.floor(width / def_item_width)
    local spacing = (width - column * def_item_width) / (column - 1)

    group.spacing = {x = spacing, y = spacing}
    group.constraintCount = column
end

function UI:onDestroy()
end

function UI:refreshView(viewParam)
    print("更新界面>>>", utils.serialize(viewParam))

    -- 更新卡牌头像框
    -- self.cardAvatarCompMap = {}
    -- local cardList = player:getCardList()
    -- for i = 0, self.cardAvatarItemLayout.childCount - 1 do
    --     GameObject.Destroy(self.cardAvatarItemLayout:GetChild(i).gameObject)
    -- end
    for index, cardInfo in pairs(player.cardMap) do
        self:load_gameObject_asyn(
            "prefab1",
            "card_avatar_item",
            function(prefab)
                local node = GameObject.Instantiate(prefab).transform
                node.parent = self.cardAvatarItemLayout
                node.localPosition = {x = 0, y = 0, z = 0}
                node.localScale = {x = 1, y = 1, z = 1}
                local c =
                    comp:addComponent(
                    node,
                    "card_avatar_item",
                    {
                        info = cardInfo,
                        onClick = function(o)
                            self:onCardAvatarClick(o)
                        end
                    }
                )
                self.cardAvatarCompMap[cardInfo:get_cid()] = c
            end
        )

        if (index == 1) then
            break
        end
    end

    -- -- 更新卡牌内容
    -- if (self.cardInfo ~= nil) then
    --     self.cardAvatarCompMap[self.cardInfo:get_cid()]:unselect()
    -- end
    -- if (viewParam.cid == nil or player.cardMap[viewParam.cid] == nil) then
    --     self.cardInfo = cardList[1]
    -- else
    --     self.cardInfo = player.cardMap[viewParam.cid]
    -- end
    -- self.cardAvatarCompMap[self.cardInfo:get_cid()]:select()

    -- -- 更新卡牌
    -- for i = 0, self.cardLayout.childCount - 1 do
    --     GameObject.Destroy(self.cardLayout:GetChild(i).gameObject)
    -- end
    -- local node = GameObject.Instantiate(self:load_gameObject("prefab1", "card_own_item")).transform
    -- node.parent = self.cardLayout
    -- node.localPosition = {x = 0, y = 0, z = 0}
    -- node.localScale = {x = 1.0, y = 1.0, z = 1.0}
    -- comp:addComponent(node, "card_own_item", {info = self.cardInfo})
end
-- 点击卡牌头像框
function UI:onCardAvatarClick(o)
    local info = o.info
    print("点击头像框>>>>", utils.serialize(info.baseInfo))
    self:refreshView({cid = o.info:get_cid()})
end
return UI
