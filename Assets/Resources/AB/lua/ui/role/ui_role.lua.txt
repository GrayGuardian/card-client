local base = require("ui_base")
local UI = class("role", base)

----------------UI配置------------------
function UI:GET_AB()
    return "ui"
end
function UI:GET_DEFAULT_OPTS()
    return {order = -10, blockInput = false, blackMask = 0}
end
----------------UI配置------------------
function UI:GET_VIEWS()
    return {
        {key = "card", name = "卡牌", view = "ui_card"},
        {key = "card", name = "卡牌", view = "ui_card"}
    }
end

function UI:awake()
    self.param.page = self.param.page or 0
    self.pageBtnNodes = {}

    local btnsLayout = self.uiComp.ScrollRect.scrollView.transform:Find("Viewport"):Find("Content")
    for index, viewInfo in pairs(self:GET_VIEWS()) do
        local node = GameObject.Instantiate(self.node:Find("Temp"):Find("pageBtnTemp")).transform
        node.name = "pageBtn"
        node.parent = btnsLayout
        node.localPosition = {x = 0, y = 0, z = 0}
        node.localScale = {x = 1, y = 1, z = 1}
        comp:getCSComponent(node:Find("Text"), UEUI.Text).text = viewInfo.name
        self.pageBtnNodes[index] = node
    end
    -- 由于动态生成按钮，此处重新初始化uiComp
    self:uiCompInit()

    -- self:refreshView(self.param)
end
function UI:onDestroy()
    if (self.page_view ~= nil) then
        self.page_view:close()
    end
end
function UI:refreshView(viewParam, isForce)
    local page = viewParam.page or 0
    local viewParam = viewParam.viewParam or {}

    if (self.page_view ~= nil) then
        if (self.page == page) then
            -- 避免重复加载
            if (self.page_view.refreshView ~= nil and isForce) then
                self.page_view:refreshView(viewParam)
            end
            return
        end
        self:unselectPageBtn(self.page)
        self.page_view:close()
    end
    self.page = page
    self:selectPageBtn(self.page)
    self.page_view = ui:showUI(self:GET_VIEWS()[self.page + 1].view)
    if (self.page_view.refreshView ~= nil) then
        self.page_view:refreshView(viewParam)
    end
end
function UI:selectPageBtn(page)
    comp:getCSComponent(self.pageBtnNodes[page + 1], UEUI.Image).sprite = self:load(RES_CODE.PAGE_BTN1_ON)
end
function UI:unselectPageBtn(page)
    comp:getCSComponent(self.pageBtnNodes[page + 1], UEUI.Image).sprite = self:load(RES_CODE.PAGE_BTN1_OFF)
end

function UI:onPageBtnClick(o, order)
    local page = order - 1
    self:refreshView({page = page})
end
return UI
